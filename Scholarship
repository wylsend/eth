pragma solidity ^0.4.0;


contract Coin {

    address public owner;

    address public who;

    address public contr;

    uint max_ticket_number = 6;

    uint winner_number = 2;

    mapping (address => uint) public balances;

    mapping (address => uint256) blockHashesToBeUsed;

    event Sent(address from, address to, uint amount);
 
   uint256 randomNumber = 73;

    
    function Coin() public {
 
       owner = msg.sender;
 
   }
    
    
function generate(address to, uint amount) public {

        if (msg.sender != owner) return;

        balances[to] += amount;

    }

    
    function getWinnerNumber() public {

        uint random_number = uint(block.blockhash(block.number-1))%10 + 1;

    }

    
    function printWinnerNumber() public constant returns (uint winner_number) {

       winner_number = 2 ;

       return winner_number;

    }

    
    function send(address who, address contr, uint amount) public {

        if (balances[who] < amount) return;

        balances[who] -= amount;

        balances[contr] += amount;

        Sent(who, contr, amount);

    }
 
   
    function end(address contr, address to) public {

        if (balances[contr] < 10) return;

        if (winner_number < 3) return;

        balances[contr] -= 10;

        balances[to] += 10;

        Sent(contr, to, 10);

    }

}
